/**
 * Visma-Sign API
 * Swagger documentation for Visma-Sign API.
 *
 * OpenAPI spec version: 0.0.1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.0-SNAPSHOT
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.VismaSignClient);
  }
}(this, function(expect, VismaSignClient) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new VismaSignClient.InvitationCreateMessages();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('InvitationCreateMessages', function() {
    it('should create an instance of InvitationCreateMessages', function() {
      // uncomment below and update the code to test InvitationCreateMessages
      //var instane = new VismaSignClient.InvitationCreateMessages();
      //expect(instance).to.be.a(VismaSignClient.InvitationCreateMessages);
    });

    it('should have the property sendInvitationEmail (base name: "send_invitation_email")', function() {
      // uncomment below and update the code to test the property sendInvitationEmail
      //var instane = new VismaSignClient.InvitationCreateMessages();
      //expect(instance).to.be();
    });

    it('should have the property invitationEmailMessage (base name: "invitation_email_message")', function() {
      // uncomment below and update the code to test the property invitationEmailMessage
      //var instane = new VismaSignClient.InvitationCreateMessages();
      //expect(instance).to.be();
    });

    it('should have the property sendInvitationSms (base name: "send_invitation_sms")', function() {
      // uncomment below and update the code to test the property sendInvitationSms
      //var instane = new VismaSignClient.InvitationCreateMessages();
      //expect(instance).to.be();
    });

    it('should have the property customSms (base name: "custom_sms")', function() {
      // uncomment below and update the code to test the property customSms
      //var instane = new VismaSignClient.InvitationCreateMessages();
      //expect(instance).to.be();
    });

    it('should have the property separateInviteParts (base name: "separate_invite_parts")', function() {
      // uncomment below and update the code to test the property separateInviteParts
      //var instane = new VismaSignClient.InvitationCreateMessages();
      //expect(instance).to.be();
    });

    it('should have the property sendInviteeAllCollectedEmail (base name: "send_invitee_all_collected_email")', function() {
      // uncomment below and update the code to test the property sendInviteeAllCollectedEmail
      //var instane = new VismaSignClient.InvitationCreateMessages();
      //expect(instance).to.be();
    });

    it('should have the property sendInviterOneCollectedEmails (base name: "send_inviter_one_collected_emails")', function() {
      // uncomment below and update the code to test the property sendInviterOneCollectedEmails
      //var instane = new VismaSignClient.InvitationCreateMessages();
      //expect(instance).to.be();
    });

    it('should have the property attachmentAllowed (base name: "attachment_allowed")', function() {
      // uncomment below and update the code to test the property attachmentAllowed
      //var instane = new VismaSignClient.InvitationCreateMessages();
      //expect(instance).to.be();
    });

  });

}));
